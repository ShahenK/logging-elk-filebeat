input {  
   beats {
      # The port to listen on for filebeat connections.
      port => 5044
      # The IP address to listen for filebeat connections.
      host => "0.0.0.0"
   }
}
filter {
   if [type] == "access" {
       grok {
#           match => { "message" => "%{IPORHOST:remote_ip} - %{DATA:user_name} \[%{HTTPDATE:access_time}\] \"%{WORD:http_method} %{DATA:url} HTTP/%{NUMBER:http_version}\" %{NUMBER:response_code} %{NUMBER:body_sent_bytes} \"%{DATA:referrer}\" \"%{DATA:agent}\"" }
           match => { "message" => "%{IPORHOST:remote_ip} - %{DATA:user} \[%{HTTPDATE:access_time}\] \"%{WORD:http_method} %{DATA:url} HTTP/%{NUMBER:http_version}\" %{NUMBER:response_code} %{NUMBER:body_sent_bytes} \"%{DATA:referrer}\" \"%{DATA:agent}\"" }
#           remove_field => ["message"]
       }
   }
   if [type] == "laravel" {
       grok {
          #match => { "message" => "\[%{TIMESTAMP_ISO8601:timestamp}\] %{DATA:env}\.%{DATA:severity}: %{DATA:message}" }
          match => { "message" => "\[%{TIMESTAMP_ISO8601:timestamp}\] %{DATA:env}\.%{DATA:severity}: %{DATA:message} \{" } 
#         remove_field => ["message"]
      }
   }
   if [type] == "error" {
      grok {
         match => { "message" => "(?<timestamp>%{YEAR}[./]%{MONTHNUM}[./]%{MONTHDAY} %{TIME}) \[%{LOGLEVEL:severity}\] %{POSINT:pid}#%{NUMBER:threadid}\: \*%{NUMBER:connectionid} %{GREEDYDATA:errormessage}, client: %{IP:client}, server: %{GREEDYDATA:server}, request: \"(?<httprequest>%{WORD:httpcommand} %{UNIXPATH:httpfile} HTTP/(?<httpversion>[0-9.]*))\"(, )?(upstream: \"(?<upstream>[^,]*)\")?(, )?(host: \"(?<host>[^,]*)\")?" }
 #        remove_field => ["message"]
      }
   }
#    dissect {
      #mapping => { "message" => " \[%{TIMESTAMP_ISO8601:timestamp_l}\]"} 
#      mapping => { 'message' => '%{clientip} %{ident} %{agent} [%{timestamp} %{+timestamp}] "%{method} %{request} HTTP/%{httpversion}" %{answer} %{byte} "%{referrer}" "%{ua} %{+ua} %{+ua}/%{ua_version} (%{OS} %{+OS} %{+OS}) %{subversion}/%{+subversion} %{browser}/%{browser_version}" "%{agent}"'}
#   }
   mutate {
      copy => {
         "[log_prefix]" => "[@metadata][log_prefix]"
      }
   }
}
output {
   elasticsearch {
       hosts => ["elasticsearch:9200"]
       index => "%{[@metadata][log_prefix]}.logs"
   }
   stdout { codec => rubydebug }
}
